package charlie;
option optimize_for = LITE_RUNTIME;

//Some data EVP public key signed
message CRSABuffer
{
  optional bytes data = 1;
  optional bytes ek = 2;
  optional bytes iv = 3;
}

//Some data signed with a private key
message CSignedBuffer
{
  optional bytes data = 1;
  optional bytes sig  = 2;
}

message CSaveContainer
{
  optional CIdentity identity  = 1;
  optional CModuleTable emodtable = 2;
  repeated CModuleStorage mod_storage = 3;
}

message CIdentity
{
  optional string private_key = 1;
  optional string public_key = 2;
}

message CModuleTable
{
  repeated CSignedBuffer signed_modules = 1;
}

enum CAcquireType
{
  // Simple get request
  HTTP_GET     = 0;
  // Signed CDownloadRequest
  HTTP_SIGNED  = 1;
}

message CModuleAcquire
{
  optional CAcquireType type = 1;
  optional bytes        data = 2;
}

message CModule
{
  optional uint64 timestamp = 1;
  //ID is the hash of the name str
  optional uint32 id = 2;
  //does it have a main function to be run on a separate thread?
  optional bool   mainfcn = 3;
  //system refuses to start without loading this first
  optional bool   initial = 4;
  repeated CModuleBinary binary = 5;
  //Any additional info
  optional bytes  info = 6;
  // Modules with higher priority will be used first
  optional uint32 priority = 7;
  // See EModuleCapabilities
  optional uint32 capabilities = 8;
  // Bind module lazily
  optional bool bind_lazy = 9 [default = true];
  optional bool bind_local = 10 [default = true];
}

message CModuleBinary
{
  // hash of the binary ( current version ) sha256
  optional bytes hash = 1;
  // supported platform, see ESystemPlatform
  optional uint32 platform = 2;
  //download information
  repeated CModuleAcquire acquire = 3;
}

enum ESystemPlatform
{
  WINDOWS = 1;
  MAC = 2;
  LINUX = 4;
}

//Info stored on a static HTTP GET
message CWebInformation
{
  optional CModuleTable mod_table = 2;
}

// Temporary storage of instance data
enum EModuleStatus
{
  MODULE_INIT = 0;
  MODULE_LOADING = 1;
  MODULE_LOADED = 2;
  MODULE_LOADED_RUNNING = 3;
}

enum EModuleEvents
{
  EVENT_MODULE_INITED = 0;
  EVENT_MODULE_STATE_CHANGE = 1;
  EVENT_MODULE_TABLE_RELOADED = 6;
  // When the unresolved modules list is updated
  EVENT_UNRESOLVED_MODULES_UPDATE = 7;
  EVENT_REQUESTED_MODULES_UPDATE = 8;
}

enum EModuleCapabilities
{
  MODULE_CAP_NONE = 0;
  // Can communicate with the server (proxy module)
  MODULE_CAP_NET = 1;
}

message CModuleInstance
{
  optional uint32 id = 1;
  optional EModuleStatus status = 2;
}

message CModuleStorage
{
  optional uint32 id = 1;
  optional bytes buf = 2;
}

// ==== MODULE SPECIFIC, CHANGING PROTO ====
