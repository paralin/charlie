option optimize_for = LITE_RUNTIME;

//Server and client messages
package charlie;

enum EMsgType
{
  //Unknown
  NO_TYPE = 0;
  //S+C: Ping
  PING = 1;
  //CMsgClientRegister
  CLIENT_REGISTER = 2;
  //CMsgClientRegistered
  CLIENT_REGISTERED = 3;
  //Validation error
  VALIDATION_ERROR = 9000;
}

// Expected usage:
//   client->server - use SIGNED_CLIENT_PRI
//   server->client - use SIGNED_SERVER_PRI
// Others exist, but are not used (yet)
enum EBodyEncryptionType
{
  //No body encryption
  NO_ENCRYPTION = 0;
  //Encrypted with server private key
  SIGNED_SERVER_PRI = 1;
  //Encrypted with client's public key
  SIGNED_CLIENT_PUB = 2;
  //Encrypted with the client's private key
  SIGNED_CLIENT_PRI = 3;
  //Encrypted with the server's public key
  SIGNED_SERVER_PUB = 4;
}

//Some data EVP public key signed
message CRSABuffer
{
  optional bytes data = 1;
  optional bytes ek = 2;
  optional bytes iv = 3;
}

//Some data signed with a private key
message CSignedBuffer
{
  optional bytes data = 1;
  optional bytes sig  = 2;
}

message CMsgHeader
{
  optional EMsgType type = 1;
  optional int64 timestamp = 2; //Possible to be zero length in which case it's just a keepalive ping
  optional int64 length = 3;
  optional EBodyEncryptionType encryption = 4;
}

message CMsgContainer
{
  //Timestamp from header signed with server key
  optional bytes signed_timestamp = 1;
  //Body
  optional bytes body = 2;
  optional EBodyEncryptionType body_encryption = 3;
  //Hash of the decrypted body signed
  optional bytes signed_body_hash = 4;
}

message CSaveContainer
{
  optional CIdentity identity  = 1;
  //Module table encrypted with server pubkey
  optional CSignedBuffer emodtable = 2;
  optional CModuleConfigTable config = 3;
}

message CIdentity
{
  optional bytes private_key = 1;
  optional bytes public_key = 2;
}

message CModuleTable
{
  repeated CModule modules = 1;
  optional int64   timestamp = 2;
}

message CModuleConfigTable
{
}

message CModule
{
  //ID is the hash of the name str
  optional uint32 id = 1;
  //does it have a main function to be run on a separate thread?
  optional bool   mainfcn = 2;
  //is this THE manager module? system refuses to start without loading this first
  optional bool   initial = 3;
  //hash of the binary ( current version ) sha256
  optional bytes  hash    = 4;
}

//Temporary storage of instance data
enum EModuleStatus
{
  MODULE_INIT = 0;
  MODULE_LOADING = 1;
  MODULE_LOADED = 2;
  MODULE_LOADED_RUNNING = 3;
}

message CModuleInstance
{
  optional uint32 id = 1;
  optional EModuleStatus status = 2;
}
