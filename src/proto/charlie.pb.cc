// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: charlie.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "charlie.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace charlie {

namespace {

const ::google::protobuf::Descriptor* CMsgHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSaveContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSaveContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSaveIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSaveIdentity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBodyEncryptionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_charlie_2eproto() {
  protobuf_AddDesc_charlie_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "charlie.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgHeader_descriptor_ = file->message_type(0);
  static const int CMsgHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeader, timestamp_),
  };
  CMsgHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHeader_descriptor_,
      CMsgHeader::default_instance_,
      CMsgHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHeader));
  CMsgContainer_descriptor_ = file->message_type(1);
  static const int CMsgContainer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContainer, signed_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContainer, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContainer, body_encryption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContainer, signed_body_hash_),
  };
  CMsgContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgContainer_descriptor_,
      CMsgContainer::default_instance_,
      CMsgContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgContainer));
  CSaveContainer_descriptor_ = file->message_type(2);
  static const int CSaveContainer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSaveContainer, identity_),
  };
  CSaveContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSaveContainer_descriptor_,
      CSaveContainer::default_instance_,
      CSaveContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSaveContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSaveContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSaveContainer));
  CSaveIdentity_descriptor_ = file->message_type(3);
  static const int CSaveIdentity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSaveIdentity, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSaveIdentity, public_key_),
  };
  CSaveIdentity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSaveIdentity_descriptor_,
      CSaveIdentity::default_instance_,
      CSaveIdentity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSaveIdentity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSaveIdentity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSaveIdentity));
  EMsgType_descriptor_ = file->enum_type(0);
  EBodyEncryptionType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_charlie_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHeader_descriptor_, &CMsgHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgContainer_descriptor_, &CMsgContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSaveContainer_descriptor_, &CSaveContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSaveIdentity_descriptor_, &CSaveIdentity::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_charlie_2eproto() {
  delete CMsgHeader::default_instance_;
  delete CMsgHeader_reflection_;
  delete CMsgContainer::default_instance_;
  delete CMsgContainer_reflection_;
  delete CSaveContainer::default_instance_;
  delete CSaveContainer_reflection_;
  delete CSaveIdentity::default_instance_;
  delete CSaveIdentity_reflection_;
}

void protobuf_AddDesc_charlie_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcharlie.proto\022\007charlie\"@\n\nCMsgHeader\022\037"
    "\n\004type\030\001 \001(\0162\021.charlie.EMsgType\022\021\n\ttimes"
    "tamp\030\002 \001(\003\"\210\001\n\rCMsgContainer\022\030\n\020signed_t"
    "imestamp\030\001 \001(\014\022\014\n\004body\030\002 \001(\014\0225\n\017body_enc"
    "ryption\030\003 \001(\0162\034.charlie.EBodyEncryptionT"
    "ype\022\030\n\020signed_body_hash\030\004 \001(\014\":\n\016CSaveCo"
    "ntainer\022(\n\010identity\030\001 \001(\0132\026.charlie.CSav"
    "eIdentity\"8\n\rCSaveIdentity\022\023\n\013private_ke"
    "y\030\001 \001(\014\022\022\n\npublic_key\030\002 \001(\014*d\n\010EMsgType\022"
    "\013\n\007NO_TYPE\020\000\022\010\n\004PING\020\001\022\023\n\017CLIENT_REGISTE"
    "R\020\002\022\025\n\021CLIENT_REGISTERED\020\003\022\025\n\020VALIDATION"
    "_ERROR\020\250F*G\n\023EBodyEncryptionType\022\021\n\rNO_E"
    "NCRYPTION\020\000\022\n\n\006SIGNED\020\001\022\021\n\rXOR_TIMESTAMP"
    "\020\002", 522);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "charlie.proto", &protobuf_RegisterTypes);
  CMsgHeader::default_instance_ = new CMsgHeader();
  CMsgContainer::default_instance_ = new CMsgContainer();
  CSaveContainer::default_instance_ = new CSaveContainer();
  CSaveIdentity::default_instance_ = new CSaveIdentity();
  CMsgHeader::default_instance_->InitAsDefaultInstance();
  CMsgContainer::default_instance_->InitAsDefaultInstance();
  CSaveContainer::default_instance_->InitAsDefaultInstance();
  CSaveIdentity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_charlie_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_charlie_2eproto {
  StaticDescriptorInitializer_charlie_2eproto() {
    protobuf_AddDesc_charlie_2eproto();
  }
} static_descriptor_initializer_charlie_2eproto_;
const ::google::protobuf::EnumDescriptor* EMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMsgType_descriptor_;
}
bool EMsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 9000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBodyEncryptionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBodyEncryptionType_descriptor_;
}
bool EBodyEncryptionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHeader::kTypeFieldNumber;
const int CMsgHeader::kTimestampFieldNumber;
#endif  // !_MSC_VER

CMsgHeader::CMsgHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHeader::InitAsDefaultInstance() {
}

CMsgHeader::CMsgHeader(const CMsgHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHeader::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHeader::~CMsgHeader() {
  SharedDtor();
}

void CMsgHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHeader_descriptor_;
}

const CMsgHeader& CMsgHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_charlie_2eproto();
  return *default_instance_;
}

CMsgHeader* CMsgHeader::default_instance_ = NULL;

CMsgHeader* CMsgHeader::New() const {
  return new CMsgHeader;
}

void CMsgHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .charlie.EMsgType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::charlie::EMsgType_IsValid(value)) {
            set_type(static_cast< ::charlie::EMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .charlie.EMsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .charlie.EMsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .charlie.EMsgType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHeader::MergeFrom(const CMsgHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHeader::CopyFrom(const CMsgHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHeader::IsInitialized() const {

  return true;
}

void CMsgHeader::Swap(CMsgHeader* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHeader_descriptor_;
  metadata.reflection = CMsgHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgContainer::kSignedTimestampFieldNumber;
const int CMsgContainer::kBodyFieldNumber;
const int CMsgContainer::kBodyEncryptionFieldNumber;
const int CMsgContainer::kSignedBodyHashFieldNumber;
#endif  // !_MSC_VER

CMsgContainer::CMsgContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgContainer::InitAsDefaultInstance() {
}

CMsgContainer::CMsgContainer(const CMsgContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgContainer::SharedCtor() {
  _cached_size_ = 0;
  signed_timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_encryption_ = 0;
  signed_body_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgContainer::~CMsgContainer() {
  SharedDtor();
}

void CMsgContainer::SharedDtor() {
  if (signed_timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete signed_timestamp_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (signed_body_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete signed_body_hash_;
  }
  if (this != default_instance_) {
  }
}

void CMsgContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgContainer_descriptor_;
}

const CMsgContainer& CMsgContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_charlie_2eproto();
  return *default_instance_;
}

CMsgContainer* CMsgContainer::default_instance_ = NULL;

CMsgContainer* CMsgContainer::New() const {
  return new CMsgContainer;
}

void CMsgContainer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signed_timestamp()) {
      if (signed_timestamp_ != &::google::protobuf::internal::kEmptyString) {
        signed_timestamp_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    body_encryption_ = 0;
    if (has_signed_body_hash()) {
      if (signed_body_hash_ != &::google::protobuf::internal::kEmptyString) {
        signed_body_hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signed_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signed_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_body_encryption;
        break;
      }

      // optional .charlie.EBodyEncryptionType body_encryption = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_encryption:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::charlie::EBodyEncryptionType_IsValid(value)) {
            set_body_encryption(static_cast< ::charlie::EBodyEncryptionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signed_body_hash;
        break;
      }

      // optional bytes signed_body_hash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signed_body_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signed_body_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes signed_timestamp = 1;
  if (has_signed_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->signed_timestamp(), output);
  }

  // optional bytes body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->body(), output);
  }

  // optional .charlie.EBodyEncryptionType body_encryption = 3;
  if (has_body_encryption()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->body_encryption(), output);
  }

  // optional bytes signed_body_hash = 4;
  if (has_signed_body_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->signed_body_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes signed_timestamp = 1;
  if (has_signed_timestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signed_timestamp(), target);
  }

  // optional bytes body = 2;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  // optional .charlie.EBodyEncryptionType body_encryption = 3;
  if (has_body_encryption()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->body_encryption(), target);
  }

  // optional bytes signed_body_hash = 4;
  if (has_signed_body_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->signed_body_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes signed_timestamp = 1;
    if (has_signed_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signed_timestamp());
    }

    // optional bytes body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional .charlie.EBodyEncryptionType body_encryption = 3;
    if (has_body_encryption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->body_encryption());
    }

    // optional bytes signed_body_hash = 4;
    if (has_signed_body_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signed_body_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgContainer::MergeFrom(const CMsgContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signed_timestamp()) {
      set_signed_timestamp(from.signed_timestamp());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_body_encryption()) {
      set_body_encryption(from.body_encryption());
    }
    if (from.has_signed_body_hash()) {
      set_signed_body_hash(from.signed_body_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgContainer::CopyFrom(const CMsgContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgContainer::IsInitialized() const {

  return true;
}

void CMsgContainer::Swap(CMsgContainer* other) {
  if (other != this) {
    std::swap(signed_timestamp_, other->signed_timestamp_);
    std::swap(body_, other->body_);
    std::swap(body_encryption_, other->body_encryption_);
    std::swap(signed_body_hash_, other->signed_body_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgContainer_descriptor_;
  metadata.reflection = CMsgContainer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSaveContainer::kIdentityFieldNumber;
#endif  // !_MSC_VER

CSaveContainer::CSaveContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSaveContainer::InitAsDefaultInstance() {
  identity_ = const_cast< ::charlie::CSaveIdentity*>(&::charlie::CSaveIdentity::default_instance());
}

CSaveContainer::CSaveContainer(const CSaveContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSaveContainer::SharedCtor() {
  _cached_size_ = 0;
  identity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSaveContainer::~CSaveContainer() {
  SharedDtor();
}

void CSaveContainer::SharedDtor() {
  if (this != default_instance_) {
    delete identity_;
  }
}

void CSaveContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSaveContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSaveContainer_descriptor_;
}

const CSaveContainer& CSaveContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_charlie_2eproto();
  return *default_instance_;
}

CSaveContainer* CSaveContainer::default_instance_ = NULL;

CSaveContainer* CSaveContainer::New() const {
  return new CSaveContainer;
}

void CSaveContainer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identity()) {
      if (identity_ != NULL) identity_->::charlie::CSaveIdentity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSaveContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .charlie.CSaveIdentity identity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_identity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSaveContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .charlie.CSaveIdentity identity = 1;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->identity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSaveContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .charlie.CSaveIdentity identity = 1;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->identity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSaveContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .charlie.CSaveIdentity identity = 1;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->identity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSaveContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSaveContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSaveContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSaveContainer::MergeFrom(const CSaveContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity()) {
      mutable_identity()->::charlie::CSaveIdentity::MergeFrom(from.identity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSaveContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSaveContainer::CopyFrom(const CSaveContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSaveContainer::IsInitialized() const {

  return true;
}

void CSaveContainer::Swap(CSaveContainer* other) {
  if (other != this) {
    std::swap(identity_, other->identity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSaveContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSaveContainer_descriptor_;
  metadata.reflection = CSaveContainer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSaveIdentity::kPrivateKeyFieldNumber;
const int CSaveIdentity::kPublicKeyFieldNumber;
#endif  // !_MSC_VER

CSaveIdentity::CSaveIdentity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSaveIdentity::InitAsDefaultInstance() {
}

CSaveIdentity::CSaveIdentity(const CSaveIdentity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSaveIdentity::SharedCtor() {
  _cached_size_ = 0;
  private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSaveIdentity::~CSaveIdentity() {
  SharedDtor();
}

void CSaveIdentity::SharedDtor() {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (this != default_instance_) {
  }
}

void CSaveIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSaveIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSaveIdentity_descriptor_;
}

const CSaveIdentity& CSaveIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_charlie_2eproto();
  return *default_instance_;
}

CSaveIdentity* CSaveIdentity::default_instance_ = NULL;

CSaveIdentity* CSaveIdentity::New() const {
  return new CSaveIdentity;
}

void CSaveIdentity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_private_key()) {
      if (private_key_ != &::google::protobuf::internal::kEmptyString) {
        private_key_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSaveIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes private_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_public_key;
        break;
      }

      // optional bytes public_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSaveIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->private_key(), output);
  }

  // optional bytes public_key = 2;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->public_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSaveIdentity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes private_key = 1;
  if (has_private_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->private_key(), target);
  }

  // optional bytes public_key = 2;
  if (has_public_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->public_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSaveIdentity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes private_key = 1;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->private_key());
    }

    // optional bytes public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSaveIdentity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSaveIdentity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSaveIdentity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSaveIdentity::MergeFrom(const CSaveIdentity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_key()) {
      set_private_key(from.private_key());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSaveIdentity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSaveIdentity::CopyFrom(const CSaveIdentity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSaveIdentity::IsInitialized() const {

  return true;
}

void CSaveIdentity::Swap(CSaveIdentity* other) {
  if (other != this) {
    std::swap(private_key_, other->private_key_);
    std::swap(public_key_, other->public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSaveIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSaveIdentity_descriptor_;
  metadata.reflection = CSaveIdentity_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace charlie

// @@protoc_insertion_point(global_scope)
